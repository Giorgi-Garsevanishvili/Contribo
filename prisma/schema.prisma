datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  regionId       String?
  region         Region?         @relation(fields: [regionId], references: [id], onDelete: SetNull)
  roleId         String?
  role           Role?           @relation(fields: [roleId], references: [id], onDelete: SetNull)
  memberStatusId String?
  memberStatus   MemberStatus?   @relation(fields: [memberStatusId], references: [id], onDelete: SetNull)
  regStatus      RegStatus       @default(PENDING)
  positionId     String?
  position       Position?       @relation(fields: [positionId], references: [id], onDelete: SetNull)
  rating         Int             @default(0)
  deletedAt      DateTime?
  deleted        Boolean         @default(false)
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]
  joinRequests   JoinRequest[]

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  memberStatusLogs    MemberStatusLog[]
  memberStatusChanges MemberStatusLog[] @relation("MembershipChangedBy")
  positionChanges     PositionHistory[] @relation("PositionChangedBy")
  positionHistories   PositionHistory[]
  ratingHistory       RatingHistory[]   @relation("UserRating")
  createdRating       RatingHistory[]   @relation("CreatedRatingBy")
}

enum RatingAction {
  INCREASE
  DECREASE
}

model RatingHistory {
  id          String       @id @default(cuid())
  userId      String
  value       Int
  action      RatingAction
  reason      String?
  createdById String?
  createdAt   DateTime     @default(now())

  user      User  @relation("UserRating", fields: [userId], references: [id], onDelete: Cascade)
  createdBy User? @relation("CreatedRatingBy", fields: [createdById], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdById])
}

model Position {
  id                String            @id @default(cuid())
  name              String            @unique
  users             User[]
  positionHistories PositionHistory[]
}

model PositionHistory {
  id          String    @id @default(cuid())
  userId      String
  positionId  String?
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  changedAt   DateTime  @default(now())
  updatedById String?
  changedBy   User?     @relation("PositionChangedBy", fields: [updatedById], references: [id], onDelete: Cascade)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  position Position? @relation(fields: [positionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([updatedById])
}

model MemberStatus {
  id               String            @id @default(cuid())
  name             String            @unique
  users            User[]
  memberStatusLogs MemberStatusLog[]
}

model MemberStatusLog {
  id             String    @id @default(cuid())
  userId         String
  memberStatusId String?
  startedAt      DateTime  @default(now())
  endedAt        DateTime?
  changedAt      DateTime  @default(now())
  changedById    String?
  changedBy      User?     @relation("MembershipChangedBy", fields: [changedById], references: [id], onDelete: SetNull)

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status MemberStatus? @relation(fields: [memberStatusId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([changedById])
}

model JoinRequest {
  id          String    @id @default(cuid())
  userId      String
  regionId    String?
  status      RegStatus @default(PENDING)
  requestedAt DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  region Region? @relation(fields: [regionId], references: [id], onDelete: SetNull)
}

enum RegStatus {
  PENDING
  REQUESTED
  APPROVED
  REJECTED
}

model Region {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  joinRequests JoinRequest[]
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
